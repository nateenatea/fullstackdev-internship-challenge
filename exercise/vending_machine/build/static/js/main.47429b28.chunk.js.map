{"version":3,"sources":["Drinks.js","App.js","serviceWorker.js","index.js"],"names":["Drinks","props","state","data","total","fetch","then","response","json","setState","this","ten","five","two","one","Total","Math","floor","alert","drink","Row","Object","keys","map","item","Card","style","width","Img","variant","src","image","height","Body","Button","onClick","in_stock","price","name","Text","Header","addmoney","bind","addmoney2","addmoney5","addmoney10","cancel","React","Component","App","Navbar","bg","Brand","href","Nav","Link","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47429b28.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Row } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nclass Drinks extends React.Component  {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: [],\r\n      total: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://www.mocky.io/v2/5c77c5b330000051009d64c9')\r\n    .then(response => response.json())\r\n    .then(data => this.setState({data: data.data}));\r\n  }\r\n\r\n  addmoney(){\r\n    this.setState({\r\n      total: this.state.total +1\r\n    })\r\n  }\r\n  addmoney2(){\r\n    this.setState({\r\n      total: this.state.total +2\r\n    })\r\n  }\r\n  addmoney5(){\r\n    this.setState({\r\n      total: this.state.total +5\r\n    })\r\n  }\r\n  addmoney10(){\r\n    this.setState({\r\n      total: this.state.total +10\r\n    })\r\n  }\r\n  cancel(){\r\n    let Total = this.state.total\r\n    let count, ten, five, two, one;\r\n    count = Math.floor(Total/10)\r\n    ten = count\r\n    count = Math.floor((Total-(ten*10))/5)\r\n    five = count\r\n    count = Math.floor(((Total-(ten*10))-(five*5))/2)\r\n    two = count\r\n    count = Math.floor((Total-(ten*10)-(five*5)-(two*2)))\r\n    one = count\r\n    alert('เงินทอน ' + this.state.total + ' บาท \\n' + ' เหรียญ 10 : ' + ten + '\\n' + ' เหรียญ 5 : ' + five + '\\n' + ' เหรียญ 2 : ' + two + '\\n' + ' เหรียญ 1 : ' +  one)\r\n    this.setState({\r\n      total: 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const drink = this.state.data\r\n    let Total = this.state.total\r\n\r\n    return(\r\n      <div>\r\n        <Row>\r\n        { Object.keys(drink).map(item => {\r\n          return (\r\n            <>\r\n              <Card style={{ width: '10.16rem' }}>\r\n               <Card.Img variant=\"top\" src={drink[item].image} style={{ width: '10rem', height: '10rem' }}/>\r\n               <Card.Body>\r\n               <Button variant=\"outline-primary\" onClick={() => \r\n                drink[item].in_stock==false ? alert('สินค้าหมด') : \r\n                drink[item].price > Total ? alert('เงินไม่พอ กรุณาหยอดเงินเพิ่ม') : \r\n                alert('คุณได้รับ ' + drink[item].name) + this.setState({ total: this.state.total - drink[item].price})\r\n                }>{drink[item].name}</Button>\r\n               <Card.Text>\r\n                ราคา {drink[item].price} บาท\r\n               </Card.Text>\r\n              </Card.Body>\r\n             </Card>\r\n            </>\r\n          )\r\n        })}\r\n        </Row>\r\n        <Card style={{ width: '60rem' }}>\r\n          <Card.Header>หยอดเหรียญ</Card.Header>\r\n            <Card.Body>\r\n               <Button variant=\"secondary\" onClick={this.addmoney.bind(this)}>1 บาท</Button>{' '}\r\n               <Button variant=\"secondary\" onClick={this.addmoney2.bind(this)}>2 บาท</Button>{' '}\r\n               <Button variant=\"secondary\" onClick={this.addmoney5.bind(this)}>5 บาท</Button>{' '}\r\n               <Button variant=\"secondary\" onClick={this.addmoney10.bind(this)}>10 บาท</Button>{' '}\r\n               <Card.Text>\r\n                เงินรวม : {Total}\r\n               </Card.Text>\r\n               <Button variant=\"secondary\" onClick={this.cancel.bind(this)}>ยกเลิก</Button>{' '}\r\n              </Card.Body>\r\n             </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drinks;","import React from 'react';\nimport './App.css';\nimport { Navbar,Nav } from 'react-bootstrap'\nimport Drinks from './Drinks';\n\nfunction App()  {\n  \n    return(\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Vending Manchine</Navbar.Brand>\n          <Nav>\n            <Nav.Link href=\"https://github.com/nateenatea/fullstackdev-internship-challenge\">Github</Nav.Link>\n          </Nav>\n        </Navbar>\n        <Drinks />\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}